div(class="grid-container")
  div(class="force-awakens")
    div(class="panel", style="width:100%")
      div(class="desc underline") These I have been collecting over the years, used for reference.
      div
        md-button([classcolor]="showAll_Color", (click)="showAllLinks()", [class.blue]="!showAll", [label]="showAll_Text")
  div(class="tableLike")
    h2((click)='hideLink(0)', [class.alternate]="!openList[0]", class="clickable") <i class="fa fa-arrow-circle-o-down" [class.fa-arrow-circle-o-up]=openList[0]></i> Oracle Database 
    table(*ngIf="openList[0]")
      tr
        td SQL Locks
        td
          pre.
            SELECT
            object_name, 
            object_type, 
            session_id, 
            type, -- Type or system/user lock
            lmode, -- lock mode in which session holds lock
            request, 
            block, 
            ctime -- Time since current mode was granted
            from
            v$locked_object, all_objects, v$lock
            WHERE
            v$locked_object.object_id = all_objects.object_id AND
            v$lock.id1 = all_objects.object_id AND
            v$lock.sid = v$locked_object.session_id
            -- For Load performance do add when.
            --AND ctime
      tr
        td Long Running Queries
        td
          pre.
            SELECT S.USERNAME, s.sid, s.osuser, t.sql_id, sql_text
            FROM v$sqltext_with_newlines t,V$SESSION s
            WHERE t.address =s.sql_address
            AND t.hash_value = s.sql_hash_value
            AND s.status = 'ACTIVE'
            AND s.username <> 'SYSTEM'
            AND last_call_et> 60
            ORDER by s.sid,t.piece;
      tr
        td Processing Percentage
        td
          pre.
            COLUMN percent FORMAT 999.99 ;
            SELECT sid, to_char(start_time,'hh24:mi:ss') stime, message,( sofar/totalwork)* 100 percent 
            FROM v$session_longops
            WHERE sofar/totalwork < 1;
      tr
        td Guidelines to SQL Command
        td
          ul
            li Use the keyword IN against INNER JOIN or INNER SELECT statement. IN selects only unique rows which makes the query faster.
            li Use "EXPLAIN PLAN" in JDeveloper or SQLDeveloper. This will show the database execution order. Avoid Full Scan.
            li Change query or scope down the query(using indexes key) to make the query faster.
            li. Coding may run faster by looping records in programs compared to database, sometimes it's to be considered if SQL logics to be in codes instead. 
              Look into HINTS on Oracle. It provides a tweak to the database or using Indexes on the spot.
              E.g. SELECT /*FIRST ROW(10)*/ FROM TABLE_1
            li Create VIEW for complex table joining. Maintaining in a view/store procedure for complex algorithm. This was widely used in SOA 3rd party engine where coding is not feasible.
            li To select external db - [select * from ALL_DB_LINKS] -> [select site_id, page_id, ip_address from [schema].[table], [schema].[table]@[dblink]]
      tr
        td Transactional Update
        td
          pre.
            * Updating database with Java(limit the maximum records to update to avoid memory hogging) is using addBatch in either:
            -- Statement
            -- PreparedStatement
            * Noted however any failed update with batch update will cause inconsistency as only successful 
            (did not fail in unique indexing, duplicate, correct records) will the data gets into database.
            Arrays read are returned with the code.
            int[] affectedRecords = preparedStatement.executeBatch();
            * Where every row of array represents the order of batch execution.
            >0 = Successfully updated how many records per SQL batch statement.
            SUCCESS_NO_INFO = Update successful, but do not know how many records are updated.
            EXECUTE_FAILED = Update fail.
            * If we want to make it transactional, follow the steps to ensure records does not get committed when batch update is executed unsuccessfully.
            -- con.setAutoCommit(false);
            -- con.rollback(); //to roll back all the updates. Useful for cases update all or don't do at all.
            -- con.commit(); //to update all.
            * Making deadlocks, but more reliable transactional update.
            -- getPrice = con.prepareStatement(query, ResultSet.CLOSE_CURSORS_AT_COMMIT);
            -- Savepoint save1 = con.setSavepoint(); //dehydrate the transaction
            -- con.rollback(save1);//rehydrate the transaction
            -- Connection.releaseSavepoint(save1); //release the savepoint
            *Oracle(I guess all Databases) provided something called the dirty read.
            Reading database is the fastest with this method, but unreliable, if the data is not to be used regularly(i.e. Country) use this as data consistency is not important.
            Then there is repeated read(guaranteed) and phantom read(not guaranteed but effective for new insert data).
    h2((click)='hideLink(1)', [class.alternate]="!openList[1]", class="clickable") <i class="fa fa-arrow-circle-o-down" [class.fa-arrow-circle-o-up]=openList[1]></i> Web Development
    table(*ngIf="openList[1]")
      tr 
        td Making movies
        td Sources from http://www.tweetbeam.com/blog/generating-facebook-lookback-style-dynamic-videos-html5-using-phantomjs-ffmpeg/
          ul
            li GreenTools/ GASP (payable if used commercially)
            li Ffmpeg (runnable in all platform, I'm using Window's version)
              strong ffmpeg -i video.mp4 -i audio.mp3 -map 0:v -map 1:a -codec copy -shortest out.mp4 <br> ffmpeg -y -r 30 -i frame_%05d.png -c:v libx264 -r 30 -pix_fmt yuv420p video.mp4
            li JSPhantom (Headless testkit)
    h2((click)='hideLink(2)', [class.alternate]="!openList[2]", class="clickable") <i class="fa fa-arrow-circle-o-down" [class.fa-arrow-circle-o-up]=openList[2]></i> Development Improvement
    table(*ngIf="openList[2]")
      tr 
        td Improve development
        td. 
          Use DCEVM in debug mode to improve server hotswapping. This will help development need not to restart the server. 
          More documentation on https://github.com/yoonghan/selfserviceweb/tree/master/docs
      tr
        td Analysing memory
        td Always set the heap space xMs(start) and xMx(maximum). Java 8 onwards there is no longer heap space.
          pre.
            Ideally check with jconsole. In JDK 1.6 onwards this is auto. We can setup the port via. 
            Or get this via pid if it's in the same computer (GUI have to be available), in windows, the PID is under 
            taskmanager->Processes tab; open up View->Select Page Columns and enable pid.
            jconsole hostname:portNumber   or    jconsole pid
            java -Dcom.sun.management.jmxremote.port=5000
      tr
        td Thread Dump
        td Force tread dumps with the command (in Weblogic this is available in the Node itself).
          pre.
            jstack pid > filename
            jmap -dump:file=&lt;file_name&gt; &lt;pid&gt;
            or adding this to the startup -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/disk2/dumps
            Do not kill process that hangs in unix, try killing with command (-3) "kill -3 pid". This actually helps the program to dump errors to the catalina.out or server.out files. 
            If started with nohup command, look into nohup.out or the file it's redirected if there is. > /dev/null will means not redirecting to anywhere (not recommended).
            Monitor with eclipse MAT. Not an easy task but always look for the largest usage object. Tried once before but took time, 
            the largest pie chart as it shows with MAT is not always the correct thing. One thing for webservices, try monitoring sessions, normally sessions are not cleared, 
            and especially the use of session-replication/session timeout that introduced the problem.
      tr
        td Inner class
        td Cannot be garbage collected if inner class is using outer class variable (recursive references).
    h2((click)='hideLink(3)', [class.alternate]="!openList[3]", class="clickable") <i class="fa fa-arrow-circle-o-down" [class.fa-arrow-circle-o-up]=openList[3]></i> Linux Commands
    table(*ngIf="openList[3]")
      tr 
        td curl
        td.
          Besides using HTTPWatch(in windows), this command helps in checking HTTP headers.
          <br>curl -i -X GET -H 'Content-Type=application/xml' -data 'xxx' 'http://201.31/test?' --retrieve header and document.
      tr
        td wget
        td.
          Basic GET method to trigger URL. Capable of reading from file and sending via HTTP.
          <br>wget -i "http://location"  --a service to call  as GET, use -o to get the output.
      tr
        td awk
        td grep "HEADER.*APN=" mythecube.log|awk '/APN=/ {print $1}' #Select match and print the first column data.
      tr
        td grep -v
        td grep "HEADER.*APN=" mythecube.log.2013-12*|grep -v "MSISDN" #Select match from header and inverse checking.
      tr
        td sed
        td.
          sed -n '/HEADER.*APN=/{p;n;n;n;p;}' mythecube.log.2013-12-02. #Select match where print first line skip 3 lines then print
          <br> sed 's/.*\(dnStatus: NotDelivered\).*/\1/g' smsNotif|grep "errorCode" #Replace text.
      tr
        td vmstat
        td Show the processes, observe us, sy column. sy should be as low as possible. If it fails check with jstack or pstack.
      tr
        td ulimit -n
        td Show maximum no of file descriptors. If it's too low add it to /etc/security/limits.conf for both <strong>root soft nofile ####</strong>, <strong>root hard nofile ###</strong>.
      tr
        td sort file.txt|uniq
        td To sort a file then select unique records.
      tr
        td netstat -na
        td Run as administrator in windows, can view programs utilizing the ports.
      tr
        td tcpdump
        td <strong>sudo tcpdump -n dst host 203.87.166.59</strong> #Execute tcp dump and get system output and input. Analyze with wireshark.
      tr
        td ssh-copy-id
        td Using handshake between servers without prompting for authority. Usage, 1) Run for the Host ssh server 2) Run the command in the symbiot server ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;&lt;user@server-symbiot-name&gt;&gt;
      tr
        td scp copy
        td Copy file via ssh with the command <strong>scp /path/to/file username@toServerName:/path/to/destination</strong>
      tr
        td loop
        td Sample code cd /logs/access 
          pre.
            for i in $( ls  201310*_CELCOM_PROD*.log ); do
              echo $i >> $HOME/FileExtract.log
              fgrep "kl-apac-sg-pim-jcore" $i | grep -v "neo-wap-admin" | awk -F "HTTP" '{print $2}' | awk '{sum +=$3 } END {print "Total Bytes:"sum}' >> $HOME/FileExtract.log
            done
      tr
        td w3m/lync
        td Browser like capabilities in console. Run as w3m 'http://www.google.co.uk'
    h2((click)='hideLink(4)', [class.alternate]="!openList[4]", class="clickable") <i class="fa fa-arrow-circle-o-down" [class.fa-arrow-circle-o-up]=openList[4]></i> Javascript Commands
    table(*ngIf="openList[4]")
      tr
        td typeof a_variable !== 'undefined'
        td To compare undefined variable in javascript, use the keyword <strong>typeof</strong>. No real diff with null !== a_variable and using === is better.
      tr
        td createDocumentFragment / document.body.appendChild/insertChild(fragment, document.body.nodes[0])
        td Create fragment if we want to create HTML element with javascript. This is better than DOM http://davidwalsh.name/documentfragment
      tr
        td JSON
        td To add <i>jsonData.attr = 'value';</i> <br>To delete <i>delete jsonData.attr;</i>.
    h2((click)='hideLink(5)', [class.alternate]="!openList[5]", class="clickable") <i class="fa fa-arrow-circle-o-down" [class.fa-arrow-circle-o-up]=openList[5]></i> Tools
    table(*ngIf="openList[5]")
      tr
        td Athena
        td Useful for database connection
      tr
        td MapStruct
        td Bean Mapping
      tr
        td Polymer/Material Design
        td Materialized Design
      tr
        td HikariCP/JDBI
        td Database Pool and JDBI not JPA/Hibernate
